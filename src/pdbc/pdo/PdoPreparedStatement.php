<?php
declare(strict_types=1);

namespace dev\winterframework\pdbc\pdo;

use DateTimeInterface;
use dev\winterframework\pdbc\ResultSet;
use dev\winterframework\pdbc\support\AbstractPreparedStatement;
use dev\winterframework\pdbc\types\Blob;
use dev\winterframework\pdbc\types\Clob;
use PDO;
use PDOStatement;

class PdoPreparedStatement extends AbstractPreparedStatement {
    protected PDOStatement $stmt;
    protected ?PdoResultSet $resultSet = null;
    protected array $generatedKeys = [];
    protected array $parameters = [];
    protected array $outParameters = [];
    protected array $outValues = [];

    public function __construct(
        protected PdoConnection $connection,
        protected string $sql,
        protected array $options = []
    ) {
        $this->stmt = $this->connection->getPdo()->prepare($this->sql, $this->options);
        parent::__construct();
    }

    public function getStatement(): PDOStatement {
        return $this->stmt;
    }

    public function getConnection(): PdoConnection {
        return $this->connection;
    }

    public function close(): void {
        if (isset($this->stmt)) {
            $this->stmt->closeCursor();
            $this->reset();
        }
    }

    private function reset(): void {
        $this->resultSet = null;
        $this->generatedKeys = [];
    }

    public function isClosed(): bool {
        return !isset($this->stmt);
    }

    public function clearParameters(): void {
        $this->parameters = [];
        $this->outParameters = [];
        $this->outValues = [];
    }

    public function executeQuery(): ResultSet {
        if ($this->doExecute()) {
            $this->resultSet = new PdoResultSet($this, $this->cursorName);
        } else {
            $this->resultSet = null;
        }
        $this->generatedKeys = [];
        return $this->resultSet;
    }

    public function execute(): bool {
        $this->reset();
        $pdo = $this->connection->getPdo();
        if ($this->doExecute()) {
            $this->loadAutoGeneratedKeys($pdo);
            $this->resultSet = new PdoResultSet($this, $this->cursorName);
            return true;
        }
        return false;
    }

    public function executeUpdate(): int {
        $this->reset();
        $pdo = $this->connection->getPdo();
        $count = 0;
        if ($this->doExecute()) {
            $count = $this->stmt->rowCount();
        }
        $this->loadAutoGeneratedKeys($pdo);
        return $count;
    }

    protected function doExecute(): bool {
        $this->bindInParameters();
        $this->bindOutParameters();

        return $this->stmt->execute();
    }

    protected function bindInParameters(): void {
        foreach ($this->parameters as $type => $binds) {
            switch ($type) {
                case 'bool':
                    foreach ($binds as $bindKey => $bindVal) {
                        if (is_null($bindVal)) {
                            $this->stmt->bindParam($bindKey, $bindVal, PDO::PARAM_NULL);
                        } else {
                            $this->stmt->bindParam($bindKey, $bindVal, PDO::PARAM_BOOL);
                        }
                    }
                    break;

                case 'null':
                    foreach ($binds as $bindKey => $bindVal) {
                        $this->stmt->bindParam($bindKey, $bindVal, PDO::PARAM_NULL);
                    }
                    break;

                case 'int':
                case 'float':
                    foreach ($binds as $bindKey => $bindVal) {
                        if (is_null($bindVal)) {
                            $this->stmt->bindParam($bindKey, $bindVal, PDO::PARAM_NULL);
                        } else {
                            $this->stmt->bindParam($bindKey, $bindVal, PDO::PARAM_INT);
                        }
                    }
                    break;

                case 'blob':
                    foreach ($binds as $bindKey => $bindVal) {
                        /** @var Blob $bindVal */
                        $stream = $bindVal->getStreamResource();
                        $this->stmt->bindParam($bindKey, $stream, PDO::PARAM_LOB);
                    }
                    break;

                case 'clob':

                    $driver = $this->connection->getDriverType();
                    foreach ($binds as $bindKey => $bindVal) {
                        /** @var Clob $bindVal */
                        if ($driver == 'oci') {
                            $contents = $bindVal->getString();
                            $this->stmt->bindParam($bindKey, $contents, PDO::PARAM_STR, strlen($contents));
                        } else {
                            $contents = $bindVal->getStreamResource();
                            $this->stmt->bindParam($bindKey, $contents, PDO::PARAM_LOB);
                        }
                    }
                    break;

                default:
                    foreach ($binds as $bindKey => $bindVal) {
                        if (is_null($bindVal)) {
                            $this->stmt->bindParam($bindKey, $bindVal, PDO::PARAM_NULL);
                        } else {
                            $this->stmt->bindParam($bindKey, $bindVal, PDO::PARAM_STR, strlen($bindVal));
                        }
                    }
                    break;
            }
        }
    }

    protected function bindOutParameters(): void {
        $this->outValues = [];
        foreach ($this->outParameters as $type => $binds) {

            foreach ($binds as $bindKey => $len) {
                $this->outValues[$bindKey] = null;
                $this->stmt->bindParam(
                    $bindKey,
                    $this->outValues[$bindKey],
                    $type | PDO::PARAM_INPUT_OUTPUT,
                    $len
                );
            }
        }
    }

    private function loadAutoGeneratedKeys(PDO $pdo, array $columnIdxOrNames = []): void {
        if (empty($columnIdxOrNames)) {
            $this->generatedKeys[] = $pdo->lastInsertId();
        } else {
            foreach ($columnIdxOrNames as $name) {
                if (is_int($name)) {
                    $this->generatedKeys[] = $pdo->lastInsertId();
                } else {
                    $this->generatedKeys[] = $pdo->lastInsertId($name);
                }
            }
        }
    }

    public function getResultSet(): ?PdoResultSet {
        return $this->resultSet;
    }

    public function getGeneratedKeys(): array {
        return $this->generatedKeys;
    }

    /**
     * -----------------------------------
     * Setters for Parameters
     *
     * @param int|string $bind
     * @param bool $value
     */
    public function setBoolean(int|string $bind, bool $value): void {
        if (!isset($this->parameters['bool'])) {
            $this->parameters['bool'] = [];
        }
        $this->parameters['bool'][$bind] = $value;
    }

    public function setInt(int|string $bind, int $value): void {
        if (!isset($this->parameters['int'])) {
            $this->parameters['int'] = [];
        }
        $this->parameters['int'][$bind] = $value;
    }

    public function setFloat(int|string $bind, float $value): void {
        if (!isset($this->parameters['float'])) {
            $this->parameters['float'] = [];
        }
        $this->parameters['float'][$bind] = $value;
    }

    public function setNull(int|string $bind, int $sqlType = null): void {
        if (!isset($this->parameters['null'])) {
            $this->parameters['null'] = [];
        }
        $this->parameters['null'][$bind] = null;
    }

    public function setString(int|string $bind, string $value): void {
        if (!isset($this->parameters['string'])) {
            $this->parameters['string'] = [];
        }
        $this->parameters['string'][$bind] = $value;
    }

    public function setDate(int|string $bind, DateTimeInterface|int|string $value): void {
        if (!isset($this->parameters['date'])) {
            $this->parameters['date'] = [];
        }
        if ($value instanceof DateTimeInterface) {
            $date = $value->format('Y-m-d H:i:s');
        } else if (is_numeric($value)) {
            $date = gmdate('Y-m-d H:i:s', $value);
        } else {
            $date = $value;
        }
        $this->parameters['date'][$bind] = $date;
    }

    public function setBlob(int|string $bind, Blob $value): void {
        if (!isset($this->parameters['blob'])) {
            $this->parameters['blob'] = [];
        }
        $this->parameters['blob'][$bind] = $value;
    }

    public function setClob(int|string $bind, Clob $value): void {
        if (!isset($this->parameters['clob'])) {
            $this->parameters['clob'] = [];
        }
        $this->parameters['clob'][$bind] = $value;
    }

}