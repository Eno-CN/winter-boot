<?php
declare(strict_types=1);

namespace dev\winterframework\pdbc\oci;

use dev\winterframework\pdbc\core\BindType;
use dev\winterframework\pdbc\core\BindVar;
use dev\winterframework\pdbc\ResultSet;
use dev\winterframework\pdbc\support\AbstractPreparedStatement;

class OciPreparedStatement extends AbstractPreparedStatement {
    protected mixed $stmt;
    protected ?OciResultSet $resultSet = null;
    protected array $generatedKeys = [];
    private array $tmpValues = [];
    private int $commitMode;
    private mixed $oci;

    public function __construct(
        protected OciConnection $connection,
        protected string $sql,
        protected array $options = []
    ) {
        $this->oci = $this->connection->getOci();
        $this->stmt = oci_parse($this->oci, $sql);
        $this->commitMode = $this->connection->getCommitMode();
        parent::__construct();
    }

    public function __destruct() {
        $this->close();
    }

    public function getStatement(): mixed {
        return $this->stmt;
    }

    public function getConnection(): OciConnection {
        return $this->connection;
    }

    public function close(): void {
        if (isset($this->stmt)) {
            oci_free_statement($this->stmt);
            $this->stmt = null;
            $this->reset();
        }
    }

    private function reset(): void {
        $this->resultSet = null;
        $this->generatedKeys = [];
    }

    public function isClosed(): bool {
        return !isset($this->stmt);
    }

    public function executeQuery(): ResultSet {
        if ($this->doExecute()) {
            $this->resultSet = new OciResultSet($this, $this->cursorName);
        } else {
            $this->resultSet = null;
        }
        $this->generatedKeys = [];
        return $this->resultSet;
    }

    public function execute(): bool {
        $this->reset();
        if ($this->doExecute()) {
            $this->loadAutoGeneratedKeys();
            $this->resultSet = new OciResultSet($this, $this->cursorName);
            return true;
        }
        return false;
    }

    public function executeUpdate(): int {
        $this->reset();
        $count = 0;
        if ($this->doExecute()) {
            $count = oci_num_rows($this->stmt);
        }
        $this->loadAutoGeneratedKeys();
        return $count;
    }

    protected function doExecute(): bool {
        $this->tmpValues = [];
        $this->bindInParameters();
        $this->bindOutParameters();

        $ret = oci_execute($this->stmt, $this->commitMode);
        $this->tmpValues = [];
        return $ret;
    }

    protected function bindInParameters(): void {
        foreach ($this->parameters as $bindKey => $bindVar) {
            /** @var BindVar $bindVar */

            switch ($bindVar->getType()) {
                case BindType::BOOL:
                    if (is_null($bindVar->value)) {
                        oci_bind_by_name($this->stmt, $bindKey, $bindVar->value);
                    } else {
                        oci_bind_by_name(
                            $this->stmt, $bindKey, $bindVar->value, -1, OCI_B_BOL
                        );
                    }
                    break;


                case BindType::BLOB:
                    $tmpRow = count($this->tmpValues);
                    $this->tmpValues[] = $bindVar->value->getString();
                    oci_bind_by_name(
                        $this->stmt, $bindKey, $this->tmpValues[$tmpRow], -1, OCI_B_BLOB
                    );
                    break;

                case BindType::CLOB:
                    $tmpRow = count($this->tmpValues);
                    $this->tmpValues[] = $bindVar->value->getString();
                    oci_bind_by_name(
                        $this->stmt, $bindKey, $this->tmpValues[$tmpRow], -1, OCI_B_CLOB
                    );
                    break;

                case OCI_B_CURSOR:
                case OCI_B_NTY:
                case SQLT_BIN:
                case SQLT_RSET:
                case OCI_B_ROWID:
                    oci_bind_by_name(
                        $this->stmt, $bindKey, $bindVar->value, -1, $bindVar->getType()
                    );
                    break;

                default:
                case BindType::NULL:
                case BindType::INTEGER:
                case BindType::FLOAT:
                    oci_bind_by_name($this->stmt, $bindKey, $bindVar->value);
                    break;
            }
        }
    }

    protected function bindOutParameters(): void {
        $this->outValues = [];
        foreach ($this->outParameters as $type => $binds) {

            foreach ($binds as $bindKey => $len) {
                $this->outValues[$bindKey] = null;

                oci_bind_by_name(
                    $this->stmt, $bindKey, $this->outValues[$bindKey], $len
                );
            }
        }
    }

    private function loadAutoGeneratedKeys(array $columnIdxOrNames = []): void {
        // TODO:
    }

    public function getResultSet(): ?OciResultSet {
        return $this->resultSet;
    }

    public function getGeneratedKeys(): array {
        return $this->generatedKeys;
    }

}